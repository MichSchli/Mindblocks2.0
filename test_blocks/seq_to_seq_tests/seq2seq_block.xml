<block>
    <configuration>
        <variable name="data_folder">
        </variable>
    </configuration>

    <canvas name="main">
        <component name="paragraph_reader" type="ConllReader">
            <file_path>$data_folder/src.txt</file_path>
            <columns>int,string</columns>
        </component>
        <component name="target_reader" type="ConllReader">
            <file_path>$data_folder/tgt.txt</file_path>
            <columns>int,string</columns>
        </component>

        <component name="glove_index" type="FileIndex">
            <file_path>glove.txt</file_path>
        </component>
        <component name="indexer" type="Indexer">
            <input_type>sequence</input_type>
            <input_column>1</input_column>
        </component>
        <edge>
                <source socket="output">paragraph_reader</source>
                <target socket="input">indexer</target>
        </edge>
        <edge>
                <source socket="index">glove_index</source>
                <target socket="index">indexer</target>
        </edge>

        <component name="target_indexer" type="Indexer">
            <input_type>sequence</input_type>
            <input_column>1</input_column>
        </component>
        <edge>
                <source socket="output">target_reader</source>
                <target socket="input">indexer</target>
        </edge>
        <edge>
                <source socket="index">glove_index</source>
                <target socket="index">indexer</target>
        </edge>

        <component name="encoder" type="BiRnn" language="tensorflow">
            <cell>lstm</cell>
            <dimension>600</dimension>
        </component>
        <edge>
                <source socket="output">indexer</source>
                <target socket="input">encoder</target>
        </edge>

        <component name="training_rnn" type="ScheduledSamplingRnn">
            <graph canvas="decoder">decoder-graph</graph>
            <socket>source</socket>
            <socket>teacher_token</socket>
            <link socket="source" type="context">attention:input_sequence</link>
            <link type="recurrent">decoder_lstm:output_c->previous_c:input</link>
            <link type="recurrent">decoder_lstm:output_h->previous_h:input</link>
            <link type="recurrent" switch_socket="teacher_token" probability="0.5">argmax:output->input_token:input</link>
        </component>
        <edge>
                <source socket="output">encoder</source>
                <target socket="source">training_rnn</target>
        </edge>
        <edge>
                <source socket="output">target_indexer</source>
                <target socket="teacher_token">training_rnn</target>
        </edge>

        <component name="loss" type="SequenceLoss">
            <mark socket="output">loss</mark>
            <mark socket="output">validate</mark>
        </component>
        <edge>
                <source socket="mlp:output">training_rnn</source>
                <target socket="predictions">loss</target>
        </edge>
        <edge>
                <source socket="output">target_indexer</source>
                <target socket="labels">loss</target>
        </edge>
        <component name="adam_upd" type="AdamUpdater" language="tensorflow">
            <mark socket="update">update</mark>
        </component>
        <edge>
                <source socket="output">loss</source>
                <target socket="loss">adam_upd</target>
        </edge>

        <component name="beam_search" type="BeamSearchRnnDecoder">
            <graph canvas="decoder">decoder-graph</graph>
            <socket>source</socket>
            <socket>teacher_token</socket>
            <link socket="source" type="context">attention:input_sequence</link>
            <link type="recurrent">decoder_lstm:output_c->previous_c:input</link>
            <link type="recurrent">decoder_lstm:output_h->previous_h:input</link>
            <beam>
                <probabilities>softmax:output</probabilities>
                <reinsert>input_token:input</reinsert>
            </beam>
        </component>
        <edge>
                <source socket="output">encoder</source>
                <target socket="source">beam_search</target>
        </edge>

        <component name="select" type="Select">
            <index>0</index>
            <mark socket="output">predict</mark>
        </component>
        <edge>
                <source socket="output">beam_search</source>
                <target socket="input">select</target>
        </edge>

    </canvas>
    <canvas name="decoder">
        <graph name="decoder-graph">
            <component name="previous_c" type="PassThrough">
            </component>
            <component name="previous_h" type="PassThrough">
            </component>
            <component name="input_token" type="PassThrough">
            </component>

            <component name="encoder_embedding" type="Embedding">
            </component>
            <edge>
                <source socket="output">input_token</source>
                <target socket="indexes">encoder_embedding</target>
            </edge>

            <component name="attention" type="KeyValueAttention">
                <heads>1</heads>
            </component>

            <component name="decoder_concat" type="concat">
            </component>
            <edge>
                <source socket="output">attention</source>
                <target socket="left">decoder_concat</target>
            </edge>
            <edge>
                <source socket="output">encoder_embedding</source>
                <target socket="right">decoder_concat</target>
            </edge>

            <component name="decoder_lstm" type="RnnCell">
                <cell>lstm</cell>
                <dimension>600</dimension>
            </component>
            <edge>
                <source socket="output">decoder_concat</source>
                <target socket="input_x">decoder_lstm</target>
            </edge>
            <edge>
                <source socket="output">previous_c</source>
                <target socket="previous_c">decoder_lstm</target>
            </edge>
            <edge>
                <source socket="output">previous_h</source>
                <target socket="previous_h">decoder_lstm</target>
            </edge>

            <component name="mlp" type="MultilayerPerceptron" language="tensorflow">
            <dimensions>600, 10000</dimensions>
            <dropout_rate>0.4</dropout_rate>
            </component>
            <edge cast="float">
                <source socket="output_h">decoder_lstm</source>
                <target socket="input">mlp</target>
            </edge>

            <component name="softmax" type="Softmax" language="tensorflow">
            </component>
            <edge>
                <source socket="output">mlp</source>
                <target socket="input">softmax</target>
            </edge>
            <component name="argmax" type="Argmax" language="python">
            </component>
            <edge>
                <source socket="output">softmax</source>
                <target socket="input">argmax</target>
            </edge>
        </graph>
    </canvas>
</block>